// Generated by CoffeeScript 1.7.1
(function() {
  var __modulo = function(a, b) { return (a % b + +b) % b; };

  window.d3po = window.d3po || {
    version: '0.2',
    chartcount: 0,
    curr_chart: null,
    css: "svg { font: 10px sans-serif; }\n.axis path { fill: none; stroke: #333; }\n.axis line { fill: none; stroke: #999; stroke-dasharray: 2,2;\n.label { color: black; }'",
    util: {
      transform: function(transf, elem) {
        var k, trans, v;
        trans = d3.transform(elem);
        for (k in transf) {
          v = transf[k];
          trans[k] = v;
        }
        return trans.toString();
      }
    },
    shapes: ['circle', 'cross', 'triangle-up', 'triangle-down', 'diamond', 'square'],
    colors: ['red', 'blue', 'cyan', 'green', 'orange', 'black', 'purple'],
    randomScatter: function() {
      var f, i, points, _i, _results;
      points = 10;
      f = function(i) {
        return {
          x: d3.random.normal,
          y: d3.random.normal,
          size: Math.random,
          shape: d3po.shapes[__modulo(i, d3po.shapes.length)],
          fill: d3po.colors[__modulo(i, d3po.colors.length)],
          alpha: Math.min(1, 0.5 + Math.random())
        };
      };
      _results = [];
      for (i = _i = 1; 1 <= points ? _i <= points : _i >= points; i = 1 <= points ? ++_i : --_i) {
        _results.push(f(i));
      }
      return _results;
    },
    randomLine: function() {
      var i, points, x, y, _i, _results;
      points = 15;
      x = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 15; i = ++_i) {
          _results.push(d3.random.normal()());
        }
        return _results;
      })();
      y = (function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 15; i = ++_i) {
          _results.push(d3.random.normal()());
        }
        return _results;
      })();
      x.sort(function(a, b) {
        return a - b;
      });
      _results = [];
      for (i = _i = 1; 1 <= points ? _i <= points : _i >= points; i = 1 <= points ? ++_i : --_i) {
        _results.push((function() {
          return {
            x: x[i],
            y: y[i]
          };
        })());
      }
      return _results;
    },
    randomBoxes: function() {
      var boxes, f, i, _i, _results;
      boxes = 20;
      f = function(i) {
        return {
          x: Math.random(),
          y: Math.random(),
          w: 100 * Math.max(0.1, d3.random.normal(1)()),
          h: 100 * Math.max(0.1, d3.random.normal(1)()),
          fill: colors[__modulo(i, colors.length)],
          stroke: colors[(i + 3) % colors.length],
          alpha: Math.min(1, 0.5 + Math.random())
        };
      };
      _results = [];
      for (i = _i = 1; 1 <= points ? _i <= points : _i >= points; i = 1 <= points ? ++_i : --_i) {
        _results.push(f(i));
      }
      return _results;
    },
    randomBoxGrid: function() {
      var cols, d, i, j, rows, _i, _results;
      rows = 10;
      cols = 10;
      d = function(i, j) {
        var r, w;
        w = Math.random;
        return r = {
          x: i,
          y: j,
          w: w,
          h: w,
          fill: d3po.colors[__modulo(i, d3po.colos.length)],
          stroke: colors[(i + 3) % colors.length],
          alpha: Math.min(1, 0.5 + Math.random())
        };
      };
      _results = [];
      for (j = _i = 1; 1 <= cols ? _i <= cols : _i >= cols; j = 1 <= cols ? ++_i : --_i) {
        _results.push((function() {
          var _j, _results1;
          _results1 = [];
          for (i = _j = 1; 1 <= rows ? _j <= rows : _j >= rows; i = 1 <= rows ? ++_j : --_j) {
            _results1.push(d(i, j));
          }
          return _results1;
        })());
      }
      return _results;
    },
    counter: function() {
      var counts, r;
      counts = {};
      return r = {
        get: function(key) {
          return counts[key];
        },
        inc: function(key) {
          return counts[key] = counts[key] + 1 || 0;
        }
      };
    },
    chart: function(opts) {
      var chart_height, chart_width, chartarea, d3poStyle, defaults, defs, getsetter, getsetter_fields, k, my, svg, v, _i, _len;
      if (opts == null) {
        opts = {};
      }
      defaults = {
        height: 600,
        width: 600,
        margin: {
          top: 40,
          right: 40,
          bottom: 40,
          left: 40
        },
        name: "chart_" + d3po.chartcount,
        target: "body",
        xlim: [0, 1],
        ylim: [0, 1],
        background: "#eee",
        axis: true,
        axis_opts: {
          aspect: null,
          x_label: null,
          y_label: null,
          tick_size: 4
        },
        padding: "normal",
        grid: true,
        grid_opts: {},
        zoom: false,
        zoom_opts: {},
        tooltips: true,
        tooltips_opts: {},
        hotkeys: true,
        conrols: true
      };
      for (k in defaults) {
        v = defaults[k];
        opts[k] || (opts[k] = v);
      }
      if (d3.select('#d3po_style').empty()) {
        d3poStyle = document.createElement("style");
        d3poStyle.id = "d3po_style";
        d3poStyle.type = "text/css";
        d3poStyle.innerHTML = d3po.css;
        document.getElementsByTagName("head")[0].appendChild(d3poStyle);
      }
      d3po.chartcount += 1;
      chart_width = opts.width - opts.margin.left - opts.margin.right;
      chart_height = opts.height - opts.margin.top - opts.margin.bottom;
      svg = d3.select(opts.target).append("svg").attr({
        width: opts.width,
        height: opts.height,
        id: opts.name
      });
      defs = svg.append("defs");
      defs.append("clipPath").attr({
        id: "chartarea_clip_" + opts.name
      }).append("rect").attr({
        x: 0,
        y: 0,
        width: chart_width,
        height: chart_height
      });
      svg.append("rect").attr({
        x: opts.margin.left,
        y: opts.margin.top,
        width: chart_width,
        height: chart_height
      }).style({
        fill: opts.background
      });
      chartarea = svg.append("g").attr({
        id: "chartarea",
        "clip-path": "url(#chartarea_clip_" + opts.name + ")",
        transform: d3po.util.transform({
          translate: [opts.margin.left, opts.margin.top]
        })
      });
      chartarea.append("rect").attr({
        width: chart_width,
        height: chart_height,
        opacity: 0
      });
      my = function() {
        return this;
      };
      my._props = {
        svg: svg,
        chart_width: chart_width,
        chart_height: chart_height,
        xscale: d3.scale.linear().domain([0, 1]).range([0, chart_width]),
        yscale: d3.scale.linear().domain([0, 1]).range([chart_height, 0])
      };
      my.opts = opts;
      my.counter = d3po.counter();
      my.lines = d3po.chart.lines;
      my.axis = d3po.chart.axis;
      opts.axis && my.axis();
      getsetter_fields = ["height", "width"];
      getsetter = function(field) {
        return function(v) {
          if (v != null) {
            this.opts[field] = v;
          } else {
            return this.opts[field];
          }
          return my;
        };
      };
      for (_i = 0, _len = getsetter_fields.length; _i < _len; _i++) {
        k = getsetter_fields[_i];
        my[k] = getsetter(k);
      }
      return my;
    }
  };

  d3po.chart.axis = function(opts) {
    var k, v, x_axis, x_g, y_axis, y_g, _ref;
    if (opts == null) {
      opts = {};
    }
    _ref = this.opts.axis_opts;
    for (k in _ref) {
      v = _ref[k];
      (opts != null ? opts[k] : void 0) || (opts[k] = this.opts.axis_opts[k]);
    }
    x_axis = d3.svg.axis().scale(this._props.xscale).orient("bottom").tickSize(-this._props.chart_height);
    y_axis = d3.svg.axis().scale(this._props.yscale).orient("left").tickSize(-this._props.chart_width);
    x_g = this._props.svg.insert("g", "#chartarea").attr({
      transform: d3po.util.transform({
        translate: [this.opts.margin.left, this.opts.margin.top + this._props.chart_height]
      }, this),
      "class": "x axis"
    }).call(x_axis);
    y_g = this._props.svg.insert("g", "#chartarea").attr({
      transform: d3po.util.transform({
        translate: [this.opts.margin.left, this.opts.margin.top]
      }, this),
      "class": "y axis"
    }).call(y_axis);
    if (opts.x_label) {
      x_g.append("text").attr({
        "class": "x label",
        "text-anchor": "middle",
        transform: d3po.util.transform({
          translate: [this._props.chart_width / 2, 25]
        }, this)
      }).text(opts.x_label);
    }
    if (opts.y_label) {
      y_g.append("text").attr({
        "class": "y label",
        "text-anchor": "middle",
        transform: d3po.util.transform({
          translate: [-25, this._props.chart_height / 2],
          rotate: -90
        }, this)
      }).text(opts.y_label);
    }
    this._props.x_axis = x_axis;
    return this._props.y_axis = y_axis;
  };

  d3po.chart.lines = function(data, opts) {
    var defaults, k, v, _results;
    defaults = {
      id: "line_" + this.counter.inc("line")
    };
    _results = [];
    for (k in defaults) {
      v = defaults[k];
      _results.push(opts[k] || (opts[k] = defaults[k]));
    }
    return _results;
  };

  d3po.chart.heatmap = function(data, opts) {
    var color_scale, colormap, d, data_extents, defaults, f, k, v, y_extents;
    defaults = {
      colors: ['white', '#441100']
    };
    for (k in defaults) {
      v = defaults[k];
      opts[k] || (opts[k] = defaults[k]);
    }
    colormap = d3.interpolateRgb(opts.colors[1], opts.colors[0]);
    y_extents = d3.extent(data, function(d) {
      return d.y;
    });
    data_extents = d3.extent(data, function(d) {
      return d.v;
    });
    color_scale = d3.scale.linear().range([0, 1]).domain(data_extents);
    f = function(d) {
      return {
        y: y_extents[1] - d.y + y_extents[0],
        fill: colormap(color_scale(d.v)),
        w: 1,
        h: 1
      };
    };
    return boxes((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = data.length; _i < _len; _i++) {
        d = data[_i];
        _results.push(f(d));
      }
      return _results;
    })());
  };

}).call(this);
